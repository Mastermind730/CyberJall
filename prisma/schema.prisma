// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

enum Rewards {
  Bounty
}

enum Severity {
  low
  medium
  high
  critical
}

enum PackageStatus {
  active
  upcoming
  completed
  cancelled
}

enum TicketStatus {
  open
  in_progress
  resolved
  closed
}

enum TicketPriority {
  low
  medium
  high
  urgent
}

enum InvoiceStatus {
  pending
  paid
  overdue
  cancelled
}

enum UserRole {
  customer
  provider
  admin
}

model Contacts {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  company_name String
  email        String   @unique
  contact      String
  message      String
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")
}

model Programs {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  program     String
  launched_on DateTime
  rewards     Rewards
}

model Reports {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String
  title           String
  severity        Severity
  type            String
  detail          String
  steps           String[]
  impact          String
  affected_system String
  poc             Bytes?
  createdAt       DateTime @default(now()) @map("createdAt")
  updatedAt       DateTime @updatedAt @map("updatedAt")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  work_email       String            @unique
  company_name     String
  contact          String
  message          String
  password         String
  role             UserRole          @default(customer)
  profile          Profile?
  packages         Package[]
  invoices         Invoice[]
  tickets          SupportTicket[]
  messages         Message[]
  cyberHealthScore CyberHealthScore?
  validatedCompanyId String?         @db.ObjectId
  validatedCompany Validated_Company? @relation(fields: [validatedCompanyId], references: [id])
  createdAt        DateTime?         @default(now())  // Made optional
  updatedAt        DateTime?         @updatedAt       // Made optional
}

model Profile {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @unique @db.ObjectId
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName        String?
  lastName         String?
  jobTitle         String?
  phone            String?
  avatar           String?
  twoFactorEnabled Boolean   @default(false)
  lastLogin        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Validated_User {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  work_email   String
  company_name String
  contact      String
  message      String
  password     String
}

model Company {
  id                           String               @id @default(auto()) @map("_id") @db.ObjectId
  company_name                 String               @unique
  logo                         String
  overview                     String
  year_founded                 Int
  headquarters_city            String
  headquarters_country         String
  industries_served            String[]
  target_business_size         String[]
  geographic_coverage          String[]
  team_size                    String
  services_offered             Json
  expertise_and_certifications Json
  case_studies                 Json
  client_reviews               Json
  social_links                 Json
  website                      String
  products                     Json                 @default("{}")
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  PartnerBidResponse           PartnerBidResponse[]

  @@index([year_founded])
  @@index([headquarters_city])
  @@index([headquarters_country])
  @@index([industries_served])
  @@index([team_size])
}

model Validated_Company {
  id                           String   @id @default(auto()) @map("_id") @db.ObjectId
  company_name                 String   @unique
  logo                         String
  overview                     String
  year_founded                 Int
  headquarters_city            String
  headquarters_country         String
  industries_served            String[]
  target_business_size         String[]
  geographic_coverage          String[]
  team_size                    String
  services_offered             Json
  expertise_and_certifications Json
  case_studies                 Json
  client_reviews               Json
  social_links                 Json
  website                      String
  products                     Json     @default("{}")
  users                        User[]
  packages                     Package[]
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  @@index([year_founded])
  @@index([headquarters_city])
  @@index([headquarters_country])
  @@index([industries_served])
  @@index([team_size])
}

model SecurityAssessmentRequest {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  companyName         String
  industry            String
  companySize         String
  contactName         String
  email               String
  services            String[]
  providerPreferences String[]
  preferredPartners   String[]
  multipleProviders   Boolean
  packageDuration     String
  specialRequirements String?
  confirmSubmission   Boolean
  createdAt           DateTime @default(now()) @map("createdAt")
  updatedAt           DateTime @updatedAt @map("updatedAt")
}

model Package {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  status         PackageStatus
  startDate      DateTime?
  endDate        DateTime?
  userId         String        @db.ObjectId
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerId     String?       @db.ObjectId
  provider       Validated_Company? @relation(fields: [providerId], references: [id])
  services       String[]
  totalAmount    Float
  projectCategory String?      // New field for project category
  clientCompany  String?       // New field for client company name
  reports        Json          @default("[]")
  summary        String?
  messages       Message[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  senderId       String   @db.ObjectId
  sender         User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  packageId      String   @db.ObjectId
  package        Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  isFromProvider Boolean  @default(false)
  attachments    String[] @default([])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Invoice {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String        @unique
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Float
  paidAmount    Float         @default(0)
  status        InvoiceStatus @default(pending)
  dueDate       DateTime
  description   String
  items         Json          @default("[]")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SupportTicket {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  ticketNumber String         @unique
  title        String
  description  String
  status       TicketStatus   @default(open)
  priority     TicketPriority @default(medium)
  userId       String         @db.ObjectId
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedTo   String?
  responses    Json           @default("[]")
  attachments  String[]       @default([])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model CyberHealthScore {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score           Int
  lastAssessment  DateTime
  improvements    Json     @default("[]")
  riskFactors     Json     @default("[]")
  recommendations Json     @default("[]")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model NewsArticle {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  summary     String
  category    String
  industry    String[]
  severity    Severity?
  imageUrl    String?
  sourceUrl   String?
  publishedAt DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CaseStudy {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  industry  String
  challenge String
  solution  String
  results   String
  imageUrl  String?
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Webinar {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  presenter       String
  scheduledAt     DateTime
  duration        Int
  registrationUrl String?
  recordingUrl    String?
  isLive          Boolean  @default(false)
  tags            String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum BidStatus {
  draft
  pending_review
  approved
  rejected
  completed
}

model BusinessBid {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  companyName         String
  industry            String
  contactName         String
  email               String
  phone               String?
  website             String?
  serviceTypes        String[]
  description         String
  infrastructureSize  String
  urgency             String
  complianceGoals     String[]
  budget              Float?
  additionalNotes     String?
  documents           String[]
  status              BidStatus            @default(draft)
  adminNotes          String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  partnerResponses    PartnerBidResponse[]
  shortlistedPartners String[]             @default([])
  selectedPartner     String?
}

model PartnerBidResponse {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  partnerId         String      @db.ObjectId
  partner           Company     @relation(fields: [partnerId], references: [id])
  bidId             String      @db.ObjectId
  bid               BusinessBid @relation(fields: [bidId], references: [id])
  fitDescription    String
  methodology       String
  costModel         String
  estimatedCost     Float?
  estimatedDuration String
  certifications    String[]
  caseStudyLinks    String[]
  status            BidStatus   @default(pending_review)
  isShortlisted     Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}
