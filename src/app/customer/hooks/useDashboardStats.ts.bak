"use client";

import { useState, useEffect, useCallback } from "react";

interface User {
  id: string;
  work_email: string;
  company_name: string;
  contact: string;
  message: string;
  password: string;
  role: "customer" | "provider" | "admin";
  profile?: {
    firstName?: string;
    lastName?: string;
    jobTitle?: string;
    phone?: string;
    avatar?: string;
    lastLogin?: string;
  };
}

interface Company {
  id: string;
  company_name: string;
  logo: string;
  overview: string;
  year_founded: number;
  headquarters_city: string;
  headquarters_country: string;
  industries_served: string[];
  target_business_size: string[];
  geographic_coverage: string[];
  team_size: string;
  services_offered: Record<string, unknown>;
  expertise_and_certifications: Record<string, unknown>;
  case_studies: Record<string, unknown>;
  client_reviews: Record<string, unknown>;
  social_links: Record<string, unknown>;
  website: string;
  products: Record<string, unknown>;
}

interface Package {
  id: number;
  name: string;
  status: "active" | "upcoming" | "completed";
  provider?: {
    company_name: string;
  };
  updatedAt: string;
  createdAt?: string;
}

interface Message {
  id: number;
  package: {
    name: string;
  };
  createdAt: string;
}

interface DashboardStats {
  packages: {
    active: number;
    upcoming: number;
    completed: number;
    total: number;
  };
  invoices: {
    totalAmount: number;
    paidAmount: number;
    unpaidAmount: number;
    count: number;
  };
  tickets: {
    open: number;
    resolved: number;
  };
  cyberHealth: {
    score: number;
    status?: string;
    lastScan?: string;
  };
  recentActivity: {
    packages: Package[];
    messages: Message[];
  };
}

type DashboardStatsHook = {
  stats: DashboardStats | null;
  loading: boolean;
  error: string | null;
  user: User | null;
  company: Company | null;
  refetch: () => Promise<void>;
}

export function useDashboardStats(): DashboardStatsHook {
  const [stats, setStats] = useState<DashboardStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [company, setCompany] = useState<Company | null>(null);

  const fetchStats = useCallback(async () => {
    try {
      setLoading(true);
      if (!user?.id) return;

      const [statsResponse, companyResponse] = await Promise.all([
        fetch("/api/customer/dashboard/stats", {
          headers: {
            "Content-Type": "application/json",
          },
        }),
        user.role === "provider"
          ? fetch(`/api/company/${user.id}`, {
              headers: {
                "Content-Type": "application/json",
              },
            })
          : Promise.resolve(null),
      ]);

      if (!statsResponse.ok) {
        throw new Error("Failed to fetch dashboard stats");
      }

      const statsData = await statsResponse.json();
      setStats(statsData.stats);

      if (companyResponse) {
        if (companyResponse.ok) {
          const companyData = await companyResponse.json();
          setCompany(companyData);
        } else {
          console.error("Failed to fetch company data");
        }
      }
    } catch (err) {
      console.error("Error fetching dashboard data:", err);
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setLoading(false);
    }
  }, [user]);

  // Get user data from local storage
  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      try {
        const parsedUser = JSON.parse(storedUser);
        setUser(parsedUser);
      } catch (error) {
        console.error("Error parsing user data:", error);
      }
    }
  }, []);

  // Fetch initial dashboard stats
  useEffect(() => {
    if (!user?.id) return;
    fetchStats();
  }, [user?.id, fetchStats]);

  // Setup real-time updates (websocket or polling)
  useEffect(() => {
    if (!user?.id) return;

    // Poll for updates every 30 seconds
    const interval = setInterval(fetchStats, 30000);

    return () => clearInterval(interval);
  }, [user?.id, fetchStats]);

  return {
    stats,
    loading,
    error,
    user,
    company,
    refetch: fetchStats,
  };
}